{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0xa5c333+65459]\n\tGetHandleVerifier [0x0xa5c374+65524]\n\t(No symbol) [0x0x87d973]\n\t(No symbol) [0x0x88f961]\n\t(No symbol) [0x0x88ea30]\n\t(No symbol) [0x0x884e1c]\n\t(No symbol) [0x0x883321]\n\t(No symbol) [0x0x886734]\n\t(No symbol) [0x0x8867c8]\n\t(No symbol) [0x0x8c941a]\n\t(No symbol) [0x0x8bd11a]\n\t(No symbol) [0x0x8e9dfc]\n\t(No symbol) [0x0x8bcbf4]\n\t(No symbol) [0x0x8e9fb4]\n\t(No symbol) [0x0x90b606]\n\t(No symbol) [0x0x8e9bf6]\n\t(No symbol) [0x0x8bb38e]\n\t(No symbol) [0x0x8bc274]\n\tGetHandleVerifier [0x0xcdeda3+2697763]\n\tGetHandleVerifier [0x0xcd9ec7+2677575]\n\tGetHandleVerifier [0x0xa84194+228884]\n\tGetHandleVerifier [0x0xa749f8+165496]\n\tGetHandleVerifier [0x0xa7b18d+192013]\n\tGetHandleVerifier [0x0xa647d8+99416]\n\tGetHandleVerifier [0x0xa64972+99826]\n\tGetHandleVerifier [0x0xa4ebea+10346]\n\tBaseThreadInitThunk [0x0x760c5d49+25]\n\tRtlInitializeExceptionChain [0x0x779bd1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x779bd131+561]", "trace": "self = <testScripts.test_T16VcbcFacultySchedule.Test_VCBC_AddLearnerBySearch object at 0x000002F571137750>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"af2ddf9b37181e5937a5bf606045d6f2\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.elportal = setup\n        self.login(self.elportal)\n        self.logger.info(\"******** Verifying Add Learner by Search********\")\n        self.logger.info(\"******** Define the Job Driver********\")\n        self.vcb = VCBCPage(self.elportal)\n        windowsIDs = self.elportal.window_handles\n        parentwindowid = windowsIDs[0]\n        self.logger.info(\"******** Click DFC Rotations Menu ********\")\n        self.elportal.find_element(By.XPATH, \"//button[normalize-space()='Auto Admin']\").click()\n        self.elportal.find_element(By.XPATH, \"//button[normalize-space()='Impersonate']\").click()\n        self.logger.info(\"********Switch to the Impersonate A User Form********\")\n        self.elportal.switch_to.window(parentwindowid)\n        self.elportal.find_element(By.XPATH, \"//input[@id='email']\").send_keys(\"faculty50@nightingale.test\")\n        self.elportal.find_element(By.XPATH, \"//span[normalize-space()='Impersonate']\").click()\n>       self.elportal.find_element(By.XPATH, \"//span[normalize-space()='VCBC Management']\").click()\n\ntestScripts\\test_T16VcbcFacultySchedule.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002F5711816A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x779bd1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x779bd131+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xa5c333+65459]\nE       \tGetHandleVerifier [0x0xa5c374+65524]\nE       \t(No symbol) [0x0x87d973]\nE       \t(No symbol) [0x0x88f961]\nE       \t(No symbol) [0x0x88ea30]\nE       \t(No symbol) [0x0x884e1c]\nE       \t(No symbol) [0x0x883321]\nE       \t(No symbol) [0x0x886734]\nE       \t(No symbol) [0x0x8867c8]\nE       \t(No symbol) [0x0x8c941a]\nE       \t(No symbol) [0x0x8bd11a]\nE       \t(No symbol) [0x0x8e9dfc]\nE       \t(No symbol) [0x0x8bcbf4]\nE       \t(No symbol) [0x0x8e9fb4]\nE       \t(No symbol) [0x0x90b606]\nE       \t(No symbol) [0x0x8e9bf6]\nE       \t(No symbol) [0x0x8bb38e]\nE       \t(No symbol) [0x0x8bc274]\nE       \tGetHandleVerifier [0x0xcdeda3+2697763]\nE       \tGetHandleVerifier [0x0xcd9ec7+2677575]\nE       \tGetHandleVerifier [0x0xa84194+228884]\nE       \tGetHandleVerifier [0x0xa749f8+165496]\nE       \tGetHandleVerifier [0x0xa7b18d+192013]\nE       \tGetHandleVerifier [0x0xa647d8+99416]\nE       \tGetHandleVerifier [0x0xa64972+99826]\nE       \tGetHandleVerifier [0x0xa4ebea+10346]\nE       \tBaseThreadInitThunk [0x0x760c5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x779bd1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x779bd131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "12e0c17c-ed43-403f-b35f-355fae76f056-attachment.txt", "type": "text/plain"}], "start": 1759861709519, "stop": 1759861719471, "uuid": "0c6711d7-9400-44c4-99f5-6a6d33b014cc", "historyId": "98d1a1a0012f35e547ace161bf8d38a3", "testCaseId": "98d1a1a0012f35e547ace161bf8d38a3", "fullName": "test_T16VcbcFacultySchedule.Test_VCBC_AddLearnerBySearch#test_login", "labels": [{"name": "suite", "value": "test_T16VcbcFacultySchedule"}, {"name": "subSuite", "value": "Test_VCBC_AddLearnerBySearch"}, {"name": "host", "value": "NGC-4HG1R74"}, {"name": "thread", "value": "8064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T16VcbcFacultySchedule"}], "titlePath": ["test_T16VcbcFacultySchedule.py", "Test_VCBC_AddLearnerBySearch"]}