{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testScripts.test_T13VCBCRegular.Test_Create_VCBC_Regular object at 0x0000022585CECCD0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"14bc33cdf22e252f06ec486e3a7b9162\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.elportal = setup\n        self.login(self.elportal)\n        self.logger.info(\"******** Verifying Regular VCBCs Creation********\")\n        self.logger.info(\"******** Define the Job Driver********\")\n        self.vcb = VCBCPage(self.elportal)\n        windowsIDs = self.elportal.window_handles\n        parentwindowid = windowsIDs[0]\n        self.logger.info(\"******** Click VCBC Management Menu ********\")\n        self.vcb.clickVCBCMgt()\n        self.logger.info(\"******** Click Create VCBCs Button********\")\n        self.vcb.createVCBC()\n        self.logger.info(\"********Switch to the Create VCBCs Form********\")\n        self.elportal.switch_to.window(parentwindowid)\n        # self.logger.info(\"********Switch to the Create SOFEs Form********\")\n        # self.elportal.switch_to.window(parentwindowid)\n        self.logger.info(\"********Enter the Session Name********\")\n        self.vcb.vcbcSessionName(self.sessionname)\n        self.logger.info(\"******** Click the Course Field********\")\n        self.vcb.vcbcCourses()\n        self.logger.info(\"******** Select Course 1********\")\n        self.vcb.pickCourseReg1()\n        # self.logger.info(\"******** Select Course 2********\")\n        # self.vcb.pickCourseReg2()\n        self.logger.info(\"******** Switch to the Notes' Iframe********\")\n        self.vcb.descriptionIframe()\n        self.logger.info(\"******** Enter the Notes********\")\n        self.vcb.enterDescription(self.description)\n        self.logger.info(\"******** Switch back to the Create a DFC Rotation form********\")\n        self.elportal.switch_to.default_content()\n        self.logger.info(\"******** Enter Number of Slots********\")\n        self.vcb.enterSlots(self.slot)\n        self.logger.info(\"******** Select the Live At Hour********\")\n        self.vcb.liveAt()\n        # self.logger.info(\"******** Select the Live At Month********\")\n        self.vcb.liveAtOct()\n        # self.logger.info(\"******** Select the Live At Year********\")\n        # self.vcb.liveAtYear(self.year)\n        self.logger.info(\"******** Select the Live At Date********\")\n        self.vcb.pickDate(self.elportal, '21')\n        self.logger.info(\"******** Select the Live At Hour********\")\n        self.vcb.liveHour(self.livehour)\n        self.logger.info(\"******** Select Live At AM/PM*******\")\n        # self.vcb.selLiveAM()\n        self.logger.info(\"******** Click the Close At Field********\")\n        self.vcb.closeAt()\n        self.logger.info(\"******** Select the Close At Month********\")\n>       self.vcb.closeAtOct()\n\ntestScripts\\test_T13VCBCRegular.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\VCBCPage.py:125: in closeAtOct\n    WebDriverWait(self.elportal, 10).until(EC.element_to_be_clickable((By.XPATH, \"//div[6]/div[1]/div/div/select/option[@value='9']\"))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"14bc33cdf22e252f06ec486e3a7b9162\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000022585D72AC0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "790e5982-e5ba-4ee4-a019-beae4050b63a-attachment.txt", "type": "text/plain"}], "start": 1759343236180, "stop": 1759343259398, "uuid": "1e9004c3-6f7d-4e91-bec7-4fe802318070", "historyId": "bcd651095853da6dba1a58cf5cdace9b", "testCaseId": "bcd651095853da6dba1a58cf5cdace9b", "fullName": "test_T13VCBCRegular.Test_Create_VCBC_Regular#test_login", "labels": [{"name": "suite", "value": "test_T13VCBCRegular"}, {"name": "subSuite", "value": "Test_Create_VCBC_Regular"}, {"name": "host", "value": "NGC-4HG1R74"}, {"name": "thread", "value": "24324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T13VCBCRegular"}], "titlePath": ["test_T13VCBCRegular.py", "Test_Create_VCBC_Regular"]}