{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"sidebar\"]/div[2]/div/ul/li[3]/a/div/div[1]/svg\"}\n  (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nStacktrace:\n\tGetHandleVerifier [0x0x3bfe83+66515]\n\tGetHandleVerifier [0x0x3bfec4+66580]\n\t(No symbol) [0x0x1adc48]\n\t(No symbol) [0x0x1f8704]\n\t(No symbol) [0x0x1f8aab]\n\t(No symbol) [0x0x23f482]\n\t(No symbol) [0x0x21b214]\n\t(No symbol) [0x0x23cba7]\n\t(No symbol) [0x0x21afc6]\n\t(No symbol) [0x0x1ec2ca]\n\t(No symbol) [0x0x1ed154]\n\tGetHandleVerifier [0x0x6173b3+2521347]\n\tGetHandleVerifier [0x0x612333+2500739]\n\tGetHandleVerifier [0x0x3e7cd4+229924]\n\tGetHandleVerifier [0x0x3d8238+165768]\n\tGetHandleVerifier [0x0x3deced+193085]\n\tGetHandleVerifier [0x0x3c8198+100072]\n\tGetHandleVerifier [0x0x3c8330+100480]\n\tGetHandleVerifier [0x0x3b25ea+11066]\n\tBaseThreadInitThunk [0x0x762b5d49+25]\n\tRtlInitializeExceptionChain [0x0x7776d1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7776d131+561]\n\t(No symbol) [0x0]", "trace": "self = <testScripts.test_T02Scheduling.Test_Scheduling object at 0x000002604BCE1F90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"091fdb2a943985ee44e1fb2887f1dc32\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.elportal = setup\n        # self.login(self.elportal)\n        self.logger.info(\"******** Verifying Login Test ********\")\n        self.logger.info(\"******** Call the Browse Configuration ********\")\n        self.elportal.implicitly_wait(10)\n        self.logger.info(\"******** Launch the Application URL ********\")\n        self.elportal.get(self.baseURL)\n        self.logger.info(\"******** Define the LoginPage Driver ********\")\n        self.elp = LoginPage(self.elportal)\n        self.logger.info(\"******** Click the Home Button ********\")\n        self.elp.clickHomeButton()\n        time.sleep(3)\n        self.logger.info(\"******** Enter the Username ********\")\n        self.elp.emailAddress(self.username)\n        time.sleep(3)\n        self.logger.info(\"******** Enter the Password ********\")\n        self.elp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Sign in Button********\")\n        self.elp.clickSignin()\n        self.logger.info(\"******** Verifying Scheduling Creation********\")\n        self.logger.info(\"******** Define the Job Driver********\")\n        self.dfc = DfcPage(self.elportal)\n        windowsIDs = self.elportal.window_handles\n        parentwindowid = windowsIDs[0]\n        self.logger.info(\"******** Click DFC Rotations Menu ********\")\n        # self.dfc.clickDFC()\n>       self.elportal.find_element(By.XPATH, '//*[@id=\"sidebar\"]/div[2]/div/ul/li[3]/a/div/div[1]/svg').click()\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntestScripts\\test_T02Scheduling.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002604BD696A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...eptionChain [0x0x7776d1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7776d131+561]\\\\n\\\\t(No symbol) [0x0]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"sidebar\"]/div[2]/div/ul/li[3]/a/div/div[1]/svg\"}\nE         (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#nosuchelementexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x3bfe83+66515]\nE       \tGetHandleVerifier [0x0x3bfec4+66580]\nE       \t(No symbol) [0x0x1adc48]\nE       \t(No symbol) [0x0x1f8704]\nE       \t(No symbol) [0x0x1f8aab]\nE       \t(No symbol) [0x0x23f482]\nE       \t(No symbol) [0x0x21b214]\nE       \t(No symbol) [0x0x23cba7]\nE       \t(No symbol) [0x0x21afc6]\nE       \t(No symbol) [0x0x1ec2ca]\nE       \t(No symbol) [0x0x1ed154]\nE       \tGetHandleVerifier [0x0x6173b3+2521347]\nE       \tGetHandleVerifier [0x0x612333+2500739]\nE       \tGetHandleVerifier [0x0x3e7cd4+229924]\nE       \tGetHandleVerifier [0x0x3d8238+165768]\nE       \tGetHandleVerifier [0x0x3deced+193085]\nE       \tGetHandleVerifier [0x0x3c8198+100072]\nE       \tGetHandleVerifier [0x0x3c8330+100480]\nE       \tGetHandleVerifier [0x0x3b25ea+11066]\nE       \tBaseThreadInitThunk [0x0x762b5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7776d1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7776d131+561]\nE       \t(No symbol) [0x0]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "attachments": [{"name": "log", "source": "920308a9-06ef-4d17-a844-16d6a8d0aa48-attachment.txt", "type": "text/plain"}], "start": 1760481475120, "stop": 1760481498568, "uuid": "98125925-c290-4c71-8dfd-70e47ab2acf0", "historyId": "7c53c679ca1c04079e6c4182f4369765", "testCaseId": "7c53c679ca1c04079e6c4182f4369765", "fullName": "test_T02Scheduling.Test_Scheduling#test_login", "labels": [{"name": "suite", "value": "test_T02Scheduling"}, {"name": "subSuite", "value": "Test_Scheduling"}, {"name": "host", "value": "NGC-4HG1R74"}, {"name": "thread", "value": "1888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T02Scheduling"}], "titlePath": ["test_T02Scheduling.py", "Test_Scheduling"]}