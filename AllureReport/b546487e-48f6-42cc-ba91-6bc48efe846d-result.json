{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nStacktrace:\n\tGetHandleVerifier [0x0x61c333+65459]\n\tGetHandleVerifier [0x0x61c374+65524]\n\t(No symbol) [0x0x43d7c0]\n\t(No symbol) [0x0x4888fe]\n\t(No symbol) [0x0x47d195]\n\t(No symbol) [0x0x4a9dfc]\n\t(No symbol) [0x0x47cbf4]\n\t(No symbol) [0x0x4a9fb4]\n\t(No symbol) [0x0x4cb606]\n\t(No symbol) [0x0x4a9bf6]\n\t(No symbol) [0x0x47b38e]\n\t(No symbol) [0x0x47c274]\n\tGetHandleVerifier [0x0x89eda3+2697763]\n\tGetHandleVerifier [0x0x899ec7+2677575]\n\tGetHandleVerifier [0x0x644194+228884]\n\tGetHandleVerifier [0x0x6349f8+165496]\n\tGetHandleVerifier [0x0x63b18d+192013]\n\tGetHandleVerifier [0x0x6247d8+99416]\n\tGetHandleVerifier [0x0x624972+99826]\n\tGetHandleVerifier [0x0x60ebea+10346]\n\tBaseThreadInitThunk [0x0x767c5d49+25]\n\tRtlInitializeExceptionChain [0x0x774ed1ab+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x774ed131+561]", "trace": "self = <testScripts.test_T05ImpFaculty.Test_ImpersonateFaculty object at 0x0000018771C3E850>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c056796baf26b8222302a98c8e1ec84f\")>\n\n    def test_login(self, setup):\n        self.elportal = setup\n        self.login(self.elportal)\n        self.elp = LoginPage(self.elportal)\n    \n        self.logger.info(\"******** Verifying Impersonate a Faculty********\")\n        self.logger.info(\"******** Define the Job Driver********\")\n        self.dfc = DfcPage(self.elportal)\n        windowsIDs = self.elportal.window_handles\n        parentwindowid = windowsIDs[0]\n        time.sleep(2)\n        self.logger.info(\"******** Click DFC Rotations Menu ********\")\n        self.logger.info(\"********Click the User Menu********\")\n        self.elp.userMenuNav()\n        self.logger.info(\"********Click the Impersonate Button********\")\n        self.elp.buttonImpersonate()\n        self.logger.info(\"********Switch to the Impersonate A User Modal********\")\n        self.elportal.switch_to.window(parentwindowid)\n        # time.sleep(2)\n        self.logger.info(\"********Enter the Email into the Email of User to impersonate field********\")\n        self.elp.emailImpersonate(self.emailimpersonate)\n        self.logger.info(\"********Click the Impersonate Button********\")\n        self.elp.Impersonate()\n    \n        # self.logger.info(\"********Click the DFC Rotation Menu********\")\n        # self.elp.clickDFC()\n    \n        self.logger.info(\"********Click the VCBC Management Menu********\")\n        # self.elp.clickVCBCMgt()\n        time.sleep(2)\n>       self.elportal.find_element(By.XPATH, \"//span[normalize-space()='VCBC Management']\").click()\n\ntestScripts\\test_T05ImpFaculty.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018771CB1550>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x774ed1ab+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x774ed131+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=140.0.7339.208); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x61c333+65459]\nE       \tGetHandleVerifier [0x0x61c374+65524]\nE       \t(No symbol) [0x0x43d7c0]\nE       \t(No symbol) [0x0x4888fe]\nE       \t(No symbol) [0x0x47d195]\nE       \t(No symbol) [0x0x4a9dfc]\nE       \t(No symbol) [0x0x47cbf4]\nE       \t(No symbol) [0x0x4a9fb4]\nE       \t(No symbol) [0x0x4cb606]\nE       \t(No symbol) [0x0x4a9bf6]\nE       \t(No symbol) [0x0x47b38e]\nE       \t(No symbol) [0x0x47c274]\nE       \tGetHandleVerifier [0x0x89eda3+2697763]\nE       \tGetHandleVerifier [0x0x899ec7+2677575]\nE       \tGetHandleVerifier [0x0x644194+228884]\nE       \tGetHandleVerifier [0x0x6349f8+165496]\nE       \tGetHandleVerifier [0x0x63b18d+192013]\nE       \tGetHandleVerifier [0x0x6247d8+99416]\nE       \tGetHandleVerifier [0x0x624972+99826]\nE       \tGetHandleVerifier [0x0x60ebea+10346]\nE       \tBaseThreadInitThunk [0x0x767c5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x774ed1ab+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x774ed131+561]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "bc497642-23dc-4217-9661-52f7369048db-attachment.txt", "type": "text/plain"}], "start": 1759336385291, "stop": 1759336406588, "uuid": "7a1aebbc-b9d9-4cc1-86bf-f2b5b834a32e", "historyId": "b5bf3eb8384d56ecd6dc2c9a3456232f", "testCaseId": "b5bf3eb8384d56ecd6dc2c9a3456232f", "fullName": "test_T05ImpFaculty.Test_ImpersonateFaculty#test_login", "labels": [{"name": "suite", "value": "test_T05ImpFaculty"}, {"name": "subSuite", "value": "Test_ImpersonateFaculty"}, {"name": "host", "value": "NGC-4HG1R74"}, {"name": "thread", "value": "7800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T05ImpFaculty"}], "titlePath": ["test_T05ImpFaculty.py", "Test_ImpersonateFaculty"]}