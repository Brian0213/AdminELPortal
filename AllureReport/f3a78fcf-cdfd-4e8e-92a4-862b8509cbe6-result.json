{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testScripts.test_T02Scheduling.Test_Scheduling object at 0x0000021AE2BE9E50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"15c8b86747d838406cf3c46948e93208\")>\n\n    @pytest.mark.order(1)\n    def test_login(self, setup):\n        self.elportal = setup\n        # self.login(self.elportal)\n        self.logger.info(\"******** Verifying Login Test ********\")\n        self.logger.info(\"******** Call the Browse Configuration ********\")\n        self.elportal.implicitly_wait(10)\n        self.logger.info(\"******** Launch the Application URL ********\")\n        self.elportal.get(self.baseURL)\n        self.logger.info(\"******** Define the LoginPage Driver ********\")\n        self.elp = LoginPage(self.elportal)\n        self.logger.info(\"******** Click the Home Button ********\")\n        self.elp.clickHomeButton()\n        time.sleep(3)\n        self.logger.info(\"******** Enter the Username ********\")\n        self.elp.emailAddress(self.username)\n        time.sleep(3)\n        self.logger.info(\"******** Enter the Password ********\")\n        self.elp.setPassword(self.password)\n        time.sleep(3)\n        self.logger.info(\"******** Click the Sign in Button********\")\n        self.elp.clickSignin()\n        self.logger.info(\"******** Verifying Scheduling Creation********\")\n        self.logger.info(\"******** Define the Job Driver********\")\n        self.dfc = DfcPage(self.elportal)\n        windowsIDs = self.elportal.window_handles\n        parentwindowid = windowsIDs[0]\n        self.logger.info(\"******** Click DFC Rotations Menu ********\")\n>       self.dfc.clickDFC()\n\ntestScripts\\test_T02Scheduling.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPages\\DFCPage.py:13: in clickDFC\n    WebDriverWait(self.elportal, 10).until(EC.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='DFC Rotations']\"))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"15c8b86747d838406cf3c46948e93208\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000021AE278D760>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "log", "source": "21a4d5d9-2edf-475d-a259-3cda2b1c5f6d-attachment.txt", "type": "text/plain"}], "start": 1760480232985, "stop": 1760480258290, "uuid": "0d97cd21-b21a-4a38-97e8-778d082a9e5d", "historyId": "7c53c679ca1c04079e6c4182f4369765", "testCaseId": "7c53c679ca1c04079e6c4182f4369765", "fullName": "test_T02Scheduling.Test_Scheduling#test_login", "labels": [{"name": "suite", "value": "test_T02Scheduling"}, {"name": "subSuite", "value": "Test_Scheduling"}, {"name": "host", "value": "NGC-4HG1R74"}, {"name": "thread", "value": "36256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_T02Scheduling"}], "titlePath": ["test_T02Scheduling.py", "Test_Scheduling"]}